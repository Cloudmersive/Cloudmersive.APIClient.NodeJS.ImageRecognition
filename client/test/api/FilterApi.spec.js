/**
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudmersiveImageApiClient);
  }
}(this, function(expect, CloudmersiveImageApiClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudmersiveImageApiClient.FilterApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FilterApi', function() {
    describe('filterBlackAndWhite', function() {
      it('should call filterBlackAndWhite successfully', function(done) {
        //uncomment below and update the code to test filterBlackAndWhite
        //instance.filterBlackAndWhite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterDespeckle', function() {
      it('should call filterDespeckle successfully', function(done) {
        //uncomment below and update the code to test filterDespeckle
        //instance.filterDespeckle(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterEdgeDetect', function() {
      it('should call filterEdgeDetect successfully', function(done) {
        //uncomment below and update the code to test filterEdgeDetect
        //instance.filterEdgeDetect(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterEmboss', function() {
      it('should call filterEmboss successfully', function(done) {
        //uncomment below and update the code to test filterEmboss
        //instance.filterEmboss(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterGaussianBlur', function() {
      it('should call filterGaussianBlur successfully', function(done) {
        //uncomment below and update the code to test filterGaussianBlur
        //instance.filterGaussianBlur(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterMotionBlur', function() {
      it('should call filterMotionBlur successfully', function(done) {
        //uncomment below and update the code to test filterMotionBlur
        //instance.filterMotionBlur(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterPosterize', function() {
      it('should call filterPosterize successfully', function(done) {
        //uncomment below and update the code to test filterPosterize
        //instance.filterPosterize(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('filterSwirl', function() {
      it('should call filterSwirl successfully', function(done) {
        //uncomment below and update the code to test filterSwirl
        //instance.filterSwirl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
