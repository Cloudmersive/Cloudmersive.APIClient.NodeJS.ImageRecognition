/**
 * imageapi
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DrawPolygonRequest', 'model/DrawRectangleRequest', 'model/DrawTextRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DrawPolygonRequest'), require('../model/DrawRectangleRequest'), require('../model/DrawTextRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.CloudmersiveImageApiClient) {
      root.CloudmersiveImageApiClient = {};
    }
    root.CloudmersiveImageApiClient.EditApi = factory(root.CloudmersiveImageApiClient.ApiClient, root.CloudmersiveImageApiClient.DrawPolygonRequest, root.CloudmersiveImageApiClient.DrawRectangleRequest, root.CloudmersiveImageApiClient.DrawTextRequest);
  }
}(this, function(ApiClient, DrawPolygonRequest, DrawRectangleRequest, DrawTextRequest) {
  'use strict';

  /**
   * Edit service.
   * @module api/EditApi
   * @version 1.3.5
   */

  /**
   * Constructs a new EditApi. 
   * @alias module:api/EditApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the editAutoOrient operation.
     * @callback module:api/EditApi~editAutoOrientCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Normalizes image rotation and removes EXIF rotation data
     * Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editAutoOrientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editAutoOrient = function(imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editAutoOrient");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/auto-orient/remove-exif', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editCompositeBasic operation.
     * @callback module:api/EditApi~editCompositeBasicCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Composite two images together
     * Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
     * @param {String} location Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;
     * @param {File} baseImage Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {File} layeredImage Image to layer on top of the base image.
     * @param {module:api/EditApi~editCompositeBasicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editCompositeBasic = function(location, baseImage, layeredImage, callback) {
      var postBody = null;

      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling editCompositeBasic");
      }

      // verify the required parameter 'baseImage' is set
      if (baseImage === undefined || baseImage === null) {
        throw new Error("Missing the required parameter 'baseImage' when calling editCompositeBasic");
      }

      // verify the required parameter 'layeredImage' is set
      if (layeredImage === undefined || layeredImage === null) {
        throw new Error("Missing the required parameter 'layeredImage' when calling editCompositeBasic");
      }


      var pathParams = {
        'location': location
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'baseImage': baseImage,
        'layeredImage': layeredImage
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/composite/{location}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editCompositePrecise operation.
     * @callback module:api/EditApi~editCompositePreciseCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Composite two images together precisely
     * Composites two input images together; a layered image onto a base image. Position is based on distance in pixels from each side.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.  Providing multiple parameters in a single axis (for example top and bottom) is not recommended, since only one of the parameters will be used per axis.
     * @param {File} baseImage Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {File} layeredImage Image to layer on top of the base image.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.top Optional; Desired distance in pixels from the top of the base image to the top of the layered image.
     * @param {Number} opts.bottom Optional; Desired distance in pixels from the bottom of the base image to the bottom of the layered image.
     * @param {Number} opts.left Optional; Desired distance in pixels from the left side of the base image to the left side of the layered image.
     * @param {Number} opts.right Optional; Desired distance in pixels from the right side of the base image to the right side of the layered image.
     * @param {Number} opts.width Optional; Desired width of the layered image in pixels. Leave height empty or 0 to automatically scale the image proportionally.
     * @param {Number} opts.height Optional; Desired height of the layered image in pixels. Leave width empty or 0 to automatically scale the image proportionally.
     * @param {module:api/EditApi~editCompositePreciseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editCompositePrecise = function(baseImage, layeredImage, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'baseImage' is set
      if (baseImage === undefined || baseImage === null) {
        throw new Error("Missing the required parameter 'baseImage' when calling editCompositePrecise");
      }

      // verify the required parameter 'layeredImage' is set
      if (layeredImage === undefined || layeredImage === null) {
        throw new Error("Missing the required parameter 'layeredImage' when calling editCompositePrecise");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'top': opts['top'],
        'bottom': opts['bottom'],
        'left': opts['left'],
        'right': opts['right'],
        'width': opts['width'],
        'height': opts['height']
      };
      var formParams = {
        'baseImage': baseImage,
        'layeredImage': layeredImage
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/composite/precise', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editContrastAdaptive operation.
     * @callback module:api/EditApi~editContrastAdaptiveCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adaptively adjust the contrast of the image to be more appealing and easy to see
     * Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
     * @param {Number} gamma Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editContrastAdaptiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editContrastAdaptive = function(gamma, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'gamma' is set
      if (gamma === undefined || gamma === null) {
        throw new Error("Missing the required parameter 'gamma' when calling editContrastAdaptive");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editContrastAdaptive");
      }


      var pathParams = {
        'gamma': gamma
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/contrast/{gamma}/adaptive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editCropCircle operation.
     * @callback module:api/EditApi~editCropCircleCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crop an image to an circular area
     * Crop an image to a target circular area
     * @param {Number} left The left edge of the circular crop area in pixels (X).
     * @param {Number} top The top edge of the circular crop area in pixels (Y).
     * @param {Number} radius The radius of the circular crop area in pixels.
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editCropCircleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editCropCircle = function(left, top, radius, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'left' is set
      if (left === undefined || left === null) {
        throw new Error("Missing the required parameter 'left' when calling editCropCircle");
      }

      // verify the required parameter 'top' is set
      if (top === undefined || top === null) {
        throw new Error("Missing the required parameter 'top' when calling editCropCircle");
      }

      // verify the required parameter 'radius' is set
      if (radius === undefined || radius === null) {
        throw new Error("Missing the required parameter 'radius' when calling editCropCircle");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editCropCircle");
      }


      var pathParams = {
        'left': left,
        'top': top,
        'radius': radius
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/crop/circle/{left}/{top}/{radius}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editCropRectangle operation.
     * @callback module:api/EditApi~editCropRectangleCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crop an image to a rectangular area
     * Crop an image to a target rectangular area
     * @param {Number} left The left edge of the rectangular crop area in pixels (X).
     * @param {Number} top The top edge of the rectangular crop area in pixels (Y).
     * @param {Number} width The width of the rectangular crop area in pixels.
     * @param {Number} height The height of the rectangular crop area in pixels.
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editCropRectangleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editCropRectangle = function(left, top, width, height, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'left' is set
      if (left === undefined || left === null) {
        throw new Error("Missing the required parameter 'left' when calling editCropRectangle");
      }

      // verify the required parameter 'top' is set
      if (top === undefined || top === null) {
        throw new Error("Missing the required parameter 'top' when calling editCropRectangle");
      }

      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling editCropRectangle");
      }

      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling editCropRectangle");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editCropRectangle");
      }


      var pathParams = {
        'left': left,
        'top': top,
        'width': width,
        'height': height
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/crop/rectangle/{left}/{top}/{width}/{height}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDrawPolygon operation.
     * @callback module:api/EditApi~editDrawPolygonCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Draw a polygon onto an image
     * Draw one or more polygons, with customized visuals, onto an image
     * @param {module:model/DrawPolygonRequest} request Polygon drawing request parameters
     * @param {module:api/EditApi~editDrawPolygonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDrawPolygon = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling editDrawPolygon");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/draw/polygon', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDrawRectangle operation.
     * @callback module:api/EditApi~editDrawRectangleCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Draw a rectangle onto an image
     * Draw one or more rectangles, with customized visuals, onto an image
     * @param {module:model/DrawRectangleRequest} request Draw rectangle parameters
     * @param {module:api/EditApi~editDrawRectangleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDrawRectangle = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling editDrawRectangle");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/draw/rectangle', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDrawText operation.
     * @callback module:api/EditApi~editDrawTextCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Draw text onto an image
     * Draw one or more pieces of text, with customized visuals, onto an image
     * @param {module:model/DrawTextRequest} request Draw text parameters
     * @param {module:api/EditApi~editDrawTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDrawText = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling editDrawText");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Apikey'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/draw/text', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editDropShadow operation.
     * @callback module:api/EditApi~editDropShadowCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a customizeable drop shadow to an image
     * Add a customizeable drop shadow to the image
     * @param {Number} X Horizontal (X) offset of the drop shadow
     * @param {Number} Y Vertical (Y) offset of the drop shadow
     * @param {Number} sigma Sigma (blur distance) of the drop shadow
     * @param {Number} opacity Opacity of the drop shadow; 0 is 0% and 100 is 100%
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editDropShadowCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editDropShadow = function(X, Y, sigma, opacity, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'X' is set
      if (X === undefined || X === null) {
        throw new Error("Missing the required parameter 'X' when calling editDropShadow");
      }

      // verify the required parameter 'Y' is set
      if (Y === undefined || Y === null) {
        throw new Error("Missing the required parameter 'Y' when calling editDropShadow");
      }

      // verify the required parameter 'sigma' is set
      if (sigma === undefined || sigma === null) {
        throw new Error("Missing the required parameter 'sigma' when calling editDropShadow");
      }

      // verify the required parameter 'opacity' is set
      if (opacity === undefined || opacity === null) {
        throw new Error("Missing the required parameter 'opacity' when calling editDropShadow");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editDropShadow");
      }


      var pathParams = {
        'X': X,
        'Y': Y,
        'sigma': sigma,
        'opacity': opacity
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/drop-shadow/{X}/{Y}/{sigma}/{opacity}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editInvert operation.
     * @callback module:api/EditApi~editInvertCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invert, negate the colors in the image
     * Inverts (negates) all of the colors in the image.  If the image contains transparency, the transparency will first be removed prior to inverting the image.
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editInvertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editInvert = function(imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editInvert");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/invert', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editRemoveExifData operation.
     * @callback module:api/EditApi~editRemoveExifDataCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove EXIF data from the image
     * Removes any EXIF data and profiles .
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editRemoveExifDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editRemoveExifData = function(imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editRemoveExifData");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/remove-exif', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editRemoveTransparency operation.
     * @callback module:api/EditApi~editRemoveTransparencyCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove transparency from the image
     * Removes any active transparency in the image.  Effectively renders the image at the same resolution, in the same file format, over a white background, thus removing transparency.
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editRemoveTransparencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editRemoveTransparency = function(imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editRemoveTransparency");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/remove-transparency', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editRotate operation.
     * @callback module:api/EditApi~editRotateCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate an image any number of degrees
     * Rotates an image by an arbitrary number of degrees
     * @param {Number} degrees Degrees to rotate the image; values range from 0.0 to 360.0.
     * @param {File} imageFile Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.
     * @param {module:api/EditApi~editRotateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.editRotate = function(degrees, imageFile, callback) {
      var postBody = null;

      // verify the required parameter 'degrees' is set
      if (degrees === undefined || degrees === null) {
        throw new Error("Missing the required parameter 'degrees' when calling editRotate");
      }

      // verify the required parameter 'imageFile' is set
      if (imageFile === undefined || imageFile === null) {
        throw new Error("Missing the required parameter 'imageFile' when calling editRotate");
      }


      var pathParams = {
        'degrees': degrees
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'imageFile': imageFile
      };

      var authNames = ['Apikey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/image/edit/rotate/{degrees}/angle', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
